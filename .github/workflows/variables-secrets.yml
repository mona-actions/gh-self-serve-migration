name: Migrate Variables and Secrets

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'Source repository'
        required: true
        type: string
      target_repo:
        description: 'Target repository'
        required: true
        type: string
      source_token:
        description: 'Source instance token (masked)'
        required: true
        type: string
      target_token:
        description: 'Target instance token (masked)'
        required: true
        type: string
      variables_data:
        description: 'Base64 encoded variables JSON'
        required: false
        type: string
      secrets_data:
        description: 'Base64 encoded secrets JSON'
        required: false
        type: string
      issue_number:
        description: 'Issue number for tracking'
        required: false
        type: string
      batch_number:
        description: 'Batch number'
        required: false
        type: string

permissions:
  contents: read
  issues: write

jobs:
  migrate-variables-secrets:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract repository name
        id: repo-info
        run: |
          REPO_NAME=$(basename "${{ inputs.repository }}")
          TARGET_REPO_NAME=$(basename "${{ inputs.target_repo }}")
          echo "source_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "target_name=$TARGET_REPO_NAME" >> $GITHUB_OUTPUT
      
      - name: Report migration start
        if: inputs.issue_number != ''
        uses: actions/github-script@v8
        with:
          script: |
            const batchInfo = context.payload.inputs.batch_number ? 
              `**Batch:** ${context.payload.inputs.batch_number}` : '';
            
            const message = [
              '### 🔐 Variables/Secrets Migration Starting',
              '',
              `**Repository:** \`${{ steps.repo-info.outputs.source_name }}\``,
              batchInfo,
              '',
              'Migrating repository variables and creating placeholder secrets...'
            ].filter(line => line !== '').join('\n');
            
            await github.rest.issues.createComment({
              issue_number: ${{ inputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: Process Variables
        id: variables
        if: inputs.variables_data != ''
        run: |
          # Decode the variables data
          VARIABLES_JSON=$(echo "${{ inputs.variables_data }}" | base64 -d)
          
          # Check if there are variables to process
          VAR_COUNT=$(echo "$VARIABLES_JSON" | jq -r 'length')
          
          if [ "$VAR_COUNT" -gt 0 ]; then
            echo "Processing $VAR_COUNT variables..."
            
            # Track counts
            MIGRATED_COUNT=0
            FAILED_COUNT=0
            
            # Process each variable using a for loop to avoid subshell
            for i in $(seq 0 $((VAR_COUNT - 1))); do
              VAR_NAME=$(echo "$VARIABLES_JSON" | jq -r ".[$i].name")
              VAR_VALUE=$(echo "$VARIABLES_JSON" | jq -r ".[$i].value")
              
              echo "Setting variable: $VAR_NAME"
              if GH_TOKEN="${{ inputs.target_token }}" gh variable set "$VAR_NAME" \
                --body "$VAR_VALUE" \
                --repo "${{ inputs.target_repo }}"; then
                MIGRATED_COUNT=$((MIGRATED_COUNT + 1))
              else
                FAILED_COUNT=$((FAILED_COUNT + 1))
                echo "Failed to set variable: $VAR_NAME"
              fi
            done
            
            echo "variables_migrated=$MIGRATED_COUNT" >> $GITHUB_OUTPUT
            echo "variables_failed=$FAILED_COUNT" >> $GITHUB_OUTPUT
            echo "variables_total=$VAR_COUNT" >> $GITHUB_OUTPUT
          else
            echo "variables_migrated=0" >> $GITHUB_OUTPUT
            echo "variables_failed=0" >> $GITHUB_OUTPUT
            echo "variables_total=0" >> $GITHUB_OUTPUT
          fi

      - name: Process Secrets
        id: secrets
        if: inputs.secrets_data != ''
        run: |
          # Decode the secrets data
          SECRETS_JSON=$(echo "${{ inputs.secrets_data }}" | base64 -d)
          
          # Check if there are secrets to process
          SECRET_COUNT=$(echo "$SECRETS_JSON" | jq -r 'length')
          
          if [ "$SECRET_COUNT" -gt 0 ]; then
            echo "Processing $SECRET_COUNT secrets..."
            
            # Track counts
            CREATED_COUNT=0
            FAILED_COUNT=0
            SECRET_NAMES=""
            
            # Process each secret using a for loop to avoid subshell
            for i in $(seq 0 $((SECRET_COUNT - 1))); do
              SECRET_NAME=$(echo "$SECRETS_JSON" | jq -r ".[$i].name")
              
              echo "Creating placeholder secret: $SECRET_NAME"
              if echo "PLACEHOLDER_UPDATE_REQUIRED" | \
                GH_TOKEN="${{ inputs.target_token }}" gh secret set "$SECRET_NAME" \
                --repo "${{ inputs.target_repo }}"; then
                CREATED_COUNT=$((CREATED_COUNT + 1))
                SECRET_NAMES="${SECRET_NAMES}${SECRET_NAME}\n"
              else
                FAILED_COUNT=$((FAILED_COUNT + 1))
                echo "Failed to create secret: $SECRET_NAME"
              fi
            done
            
            echo "secrets_created=$CREATED_COUNT" >> $GITHUB_OUTPUT
            echo "secrets_failed=$FAILED_COUNT" >> $GITHUB_OUTPUT
            echo "secrets_total=$SECRET_COUNT" >> $GITHUB_OUTPUT
            echo "secret_names<<EOF" >> $GITHUB_OUTPUT
            echo -e "$SECRET_NAMES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "secrets_created=0" >> $GITHUB_OUTPUT
            echo "secrets_failed=0" >> $GITHUB_OUTPUT
            echo "secrets_total=0" >> $GITHUB_OUTPUT
            echo "secret_names=" >> $GITHUB_OUTPUT
          fi
      
      - name: Report migration completion
        if: always() && inputs.issue_number != ''
        uses: actions/github-script@v8
        with:
          script: |
            const batchInfo = context.payload.inputs.batch_number ? 
              `**Batch:** ${context.payload.inputs.batch_number}` : '';
            
            // Get counts from previous steps
            const varTotal = parseInt('${{ steps.variables.outputs.variables_total }}' || '0');
            const varMigrated = parseInt('${{ steps.variables.outputs.variables_migrated }}' || '0');
            const varFailed = parseInt('${{ steps.variables.outputs.variables_failed }}' || '0');
            
            const secTotal = parseInt('${{ steps.secrets.outputs.secrets_total }}' || '0');
            const secCreated = parseInt('${{ steps.secrets.outputs.secrets_created }}' || '0');
            const secFailed = parseInt('${{ steps.secrets.outputs.secrets_failed }}' || '0');
            
            const secretNames = `${{ steps.secrets.outputs.secret_names }}`.split('\n').filter(n => n.trim());
            
            // Determine overall status - consistent with other workflows
            const totalItems = varTotal + secTotal;
            const totalFailed = varFailed + secFailed;
            const totalSuccess = varMigrated + secCreated;
            
            let success = false;
            let icon = '❌';
            let status = 'failed';
            
            if (totalItems === 0) {
              // No items to migrate - consider this success
              success = true;
              icon = '✅';
              status = 'completed successfully';
            } else if (totalFailed === 0) {
              // All items migrated successfully
              success = true;
              icon = '✅';
              status = 'completed successfully';
            } else if (totalSuccess > 0) {
              // Partial success
              icon = '⚠️';
              status = 'completed with warnings';
            }
            
            let message = [
              `### ${icon} Variables/Secrets Migration ${status}`,
              '',
              `**Repository:** \`${{ steps.repo-info.outputs.source_name }}\``,
              batchInfo,
              ''
            ];
            
            if (totalItems === 0) {
              message.push('No variables or secrets to migrate.');
            } else {
              // Add summary
              if (varTotal > 0) {
                message.push(`**Variables:** ${varMigrated}/${varTotal} migrated`);
              }
              if (secTotal > 0) {
                message.push(`**Secrets:** ${secCreated}/${secTotal} placeholder secrets created`);
              }
              
              // Add warning for manual secret updates if any were created
              if (secCreated > 0 && secretNames.length > 0) {
                message.push('');
                message.push('⚠️ **Manual Action Required:** Update these placeholder secrets with actual values:');
                secretNames.forEach(name => {
                  message.push(`- \`${name}\``);
                });
              }
              
              // Add error details if there were failures
              if (totalFailed > 0) {
                message.push('');
                message.push('⚠️ Please check the workflow logs for error details.');
              }
            }
            
            await github.rest.issues.createComment({
              issue_number: ${{ inputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message.filter(line => line !== null).join('\n')
            });